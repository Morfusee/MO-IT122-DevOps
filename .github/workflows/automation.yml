name: BrainBytes Docker Image Build CI

on:
  push:
    branches:
      - "main"
      - "develop"
      - "feat/create-github-workflow"
  pull_request:
    branches:
      - "main"
      - "develop"
  workflow_dispatch:
    inputs:
      tag:
        description: "Tag for the Docker image"
        required: false
        default: "latest"
      image_path:
        description: "Base image path (e.g., ghcr.io/owner/project-name)"
        required: false
        default: "ghcr.io/morfusee/brainbytes"

jobs:
  lint:
    name: Code Quality Checks
    timeout-minutes: 10
    runs-on: ubuntu-latest

    steps:
      - name: Check out repository
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2

      - name: Install pnpm
        run: |
          npm install -g pnpm # This will install pnpm globally
          pnpm setup # This sets up pnpm's environment variables and PATH
          echo "$(pnpm store path)" >> $GITHUB_PATH # Add pnpm's global store to PATH

      # Cache frontend
      - name: Restore frontend dependencies cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.pnpm-store
            frontend/node_modules
          key: ${{ runner.os }}-frontend-${{ hashFiles('frontend/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-frontend-

      # Frontend linting
      - name: Install frontend dependencies
        working-directory: ./frontend
        run: pnpm install --no-frozen-lockfile

      - name: Lint frontend code
        working-directory: ./frontend
        run: pnpm run lint

      # Cache backend
      - name: Restore backend dependencies cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.pnpm-store
            backend/node_modules
          key: ${{ runner.os }}-backend-${{ hashFiles('backend/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-backend-

      # Backend linting
      - name: Install backend dependencies
        working-directory: ./backend
        run: pnpm install --no-frozen-lockfile

      - name: Lint backend code
        working-directory: ./backend
        run: pnpm run lint

  test:
    name: Run Tests
    timeout-minutes: 10
    runs-on: ubuntu-latest
    environment: GitHub Actions
    env:
      APP_KEY: ${{ secrets.APP_KEY }}
      GEMINI_KEY: ${{ secrets.GEMINI_KEY }}
      MONGO_ATLAS_URI: ${{ secrets.MONGO_ATLAS_URI }}
      MONGO_DOCKER_URI: ${{ secrets.MONGO_DOCKER_URI }}
      HOST: "0.0.0.0"
      LOG_LEVEL: "info"
      IS_DOCKERIZED: "false"
    steps:
      - name: Check out repository
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2

      - name: Install pnpm
        run: |
          npm install -g pnpm # This will install pnpm globally
          pnpm setup # This sets up pnpm's environment variables and PATH
          echo "$(pnpm store path)" >> $GITHUB_PATH # Add pnpm's global store to PATH

      # Backend tests
      - name: Install backend dependencies
        working-directory: ./backend
        run: pnpm install --no-frozen-lockfile

      - name: Run api tests
        working-directory: ./backend
        run: pnpm test

      # Frontend tests
      - name: Install frontend dependencies
        working-directory: ./frontend
        run: pnpm install --no-frozen-lockfile

      - name: Cache Cypress binary
        uses: actions/cache@v3
        with:
          path: ~/.cache/Cypress
          key: ${{ runner.os }}-cypress-${{ hashFiles('frontend/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-cypress-

      - name: Install Cypress binary
        working-directory: ./frontend
        run: npx cypress install

      - name: Install root dependencies
        working-directory: ./
        run: pnpm install --no-frozen-lockfile

      - name: Run component tests
        working-directory: ./
        run: pnpm test:component-headless

  build-backend-image:
    name: Build Backend Docker Image
    timeout-minutes: 15 # Adjusted timeout for a single image build
    needs: [lint, test]
    runs-on: ubuntu-latest
    environment: GitHub Actions
    # if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4

      - name: Set dynamic tag and image path
        id: vars
        run: |
          TAG="${{ github.event.inputs.tag }}"
          if [ -z "$TAG" ]; then
            if [ "${{ github.ref_name }}" = "main" ]; then
              TAG="latest"
            else
              TAG=$(echo "${{ github.ref_name }}" | tr '/' '-')
            fi
          fi

          IMAGE_PATH="${{ github.event.inputs.image_path || 'ghcr.io/morfusee/brainbytes' }}"

          echo "tag=$TAG" >> "$GITHUB_OUTPUT"
          echo "image=$IMAGE_PATH" >> "$GITHUB_OUTPUT"

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: Morfusee
          password: ${{ secrets.GH_PAT }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and Push Backend Image with Cache
        uses: docker/build-push-action@v5
        with:
          context: .
          file: docker/backend/Dockerfile
          tags: ${{ steps.vars.outputs.image }}-backend:${{ steps.vars.outputs.tag }}
          push: true
          cache-from: type=gha
          cache-to: type=gha,mode=max

  build-frontend-image:
    name: Build Frontend Docker Image
    timeout-minutes: 15 # Adjusted timeout for a single image build
    needs: [lint, test]
    runs-on: ubuntu-latest
    environment: GitHub Actions
    # if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4

      - name: Set dynamic tag and image path
        id: vars
        run: |
          TAG="${{ github.event.inputs.tag }}"
          if [ -z "$TAG" ]; then
            if [ "${{ github.ref_name }}" = "main" ]; then
              TAG="latest"
            else
              TAG=$(echo "${{ github.ref_name }}" | tr '/' '-')
            fi
          fi

          IMAGE_PATH="${{ github.event.inputs.image_path || 'ghcr.io/morfusee/brainbytes' }}"

          echo "tag=$TAG" >> "$GITHUB_OUTPUT"
          echo "image=$IMAGE_PATH" >> "$GITHUB_OUTPUT"

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: Morfusee
          password: ${{ secrets.GH_PAT }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and Push Frontend Image with Cache
        uses: docker/build-push-action@v5
        with:
          context: .
          file: docker/frontend/Dockerfile
          tags: ${{ steps.vars.outputs.image }}-frontend:${{ steps.vars.outputs.tag }}
          push: true
          cache-from: type=gha
          cache-to: type=gha,mode=max
