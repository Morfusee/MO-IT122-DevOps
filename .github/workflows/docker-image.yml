name: BrainBytes Docker Image Build CI

on:
  push:
    branches:
      - "main"
      - "develop"
      - "feat/create-github-workflow"
  workflow_dispatch:
    inputs:
      tag:
        description: "Tag for the Docker image"
        required: false
        default: "latest"
      image_path:
        description: "Base image path (e.g., ghcr.io/owner/project-name)"
        required: false
        default: "ghcr.io/morfusee/brainbytes"

jobs:
  # build:
  #   name: Build Docker Images
  #   runs-on: ubuntu-latest
  #   environment: GitHub Actions
  #   steps:
  #     - uses: actions/checkout@v4

  #     - name: Set dynamic tag and image path
  #       id: vars
  #       run: |
  #         # Determine the tag
  #         TAG="${{ github.event.inputs.tag }}"
  #         if [ -z "$TAG" ]; then
  #           if [ "${{ github.ref_name }}" = "main" ]; then
  #             TAG="latest"
  #           else
  #             # Replace slashes in branch name with dashes
  #             TAG=$(echo "${{ github.ref_name }}" | tr '/' '-')
  #           fi
  #         fi

  #         IMAGE_PATH="${{ github.event.inputs.image_path || 'ghcr.io/morfusee/brainbytes' }}"

  #         echo "tag=$TAG" >> "$GITHUB_OUTPUT"
  #         echo "image=$IMAGE_PATH" >> "$GITHUB_OUTPUT"

  #     - name: Build and Push Frontend and Backend Images
  #       env:
  #         TAG: ${{ steps.vars.outputs.tag }}
  #         IMAGE: ${{ steps.vars.outputs.image }}
  #         GH_PAT: ${{ secrets.GH_PAT }}
  #       run: |
  #         echo "$GH_PAT" | docker login ghcr.io -u Morfusee --password-stdin

  #         # Build and push backend
  #         # The period after "docker build" sets the CONTEXT of 
  #         # where to perform the actions inside the dockerfile
  #         docker build . --file docker/backend/Dockerfile --tag $IMAGE-backend:$TAG
  #         docker push $IMAGE-backend:$TAG

  #         # Build and push frontend
  #         docker build . --file ./docker/frontend/Dockerfile --tag $IMAGE-frontend:$TAG
  #         docker push $IMAGE-frontend:$TAG

  lint:
    name: Code Quality Checks
    runs-on: ubuntu-latest

    steps:
      - name: Check out repository
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '16'
          cache: 'pnpm' # Use 'pnpm' for caching pnpm dependencies

      - name: Install pnpm
        run: |
          npm install -g pnpm # This will install pnpm globally
          pnpm setup # This sets up pnpm's environment variables and PATH
          echo "$(pnpm store path)" >> $GITHUB_PATH # Add pnpm's global store to PATH
      
      # Frontend linting
      - name: Install frontend dependencies
        working-directory: ./frontend
        run: pnpm install --no-frozen-lockfile

      - name: Lint frontend code
        working-directory: ./frontend
        run: pnpm run lint || echo "Frontend linting failed but continuing workflow"

      # Backend linting
      - name: Install backend dependencies
        working-directory: ./backend
        run: pnpm install --no-frozen-lockfile

      - name: Lint backend code
        working-directory: ./backend
        run: pnpm run lint || echo "Backend linting failed but continuing workflow"

