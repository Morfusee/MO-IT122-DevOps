// This file is auto-generated by @hey-api/openapi-ts

import type {
  Options as ClientOptions,
  TDataShape,
  Client,
} from "@hey-api/client-fetch";
import type {
  GetUsersData,
  GetUsersResponse,
  PostUsersData,
  PostPromptData,
  PostPromptResponse,
  PostRegisterData,
  PostRegisterResponse,
  PostRegisterError,
  PostLoginData,
  PostLoginResponse,
  PostLoginError,
  PostLogoutData,
  PostLogoutResponse,
  GetMeData,
  GetMeResponse,
  GetChatsData,
  GetChatsResponse,
  PostChatsData,
  PostChatsResponse,
  DeleteChatsIdData,
  GetChatsIdData,
  GetChatsIdResponse,
  PatchChatsIdData,
  PatchChatsIdResponse,
  PutChatsIdData,
  PutChatsIdResponse,
  GetChatsChatIdMessagesData,
  GetChatsChatIdMessagesResponse,
  PostChatsChatIdMessagesData,
  PostChatsChatIdMessagesResponse,
} from "./types.gen";
import { client as _heyApiClient } from "./client.gen";

export type Options<
  TData extends TDataShape = TDataShape,
  ThrowOnError extends boolean = boolean
> = ClientOptions<TData, ThrowOnError> & {
  /**
   * You can provide a client instance returned by `createClient()` instead of
   * individual options. This might be also useful if you want to implement a
   * custom client.
   */
  client?: Client;
  /**
   * You can pass arbitrary values through the `meta` object. This can be
   * used to access values that aren't defined as part of the SDK function.
   */
  meta?: Record<string, unknown>;
};

export const getUsers = <ThrowOnError extends boolean = false>(
  options?: Options<GetUsersData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    GetUsersResponse,
    unknown,
    ThrowOnError
  >({
    url: "/users",
    ...options,
  });
};

export const postUsers = <ThrowOnError extends boolean = false>(
  options?: Options<PostUsersData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).post<
    unknown,
    unknown,
    ThrowOnError
  >({
    url: "/users",
    ...options,
  });
};

export const postPrompt = <ThrowOnError extends boolean = false>(
  options?: Options<PostPromptData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).post<
    PostPromptResponse,
    unknown,
    ThrowOnError
  >({
    url: "/prompt",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

export const postRegister = <ThrowOnError extends boolean = false>(
  options?: Options<PostRegisterData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).post<
    PostRegisterResponse,
    PostRegisterError,
    ThrowOnError
  >({
    url: "/register",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

export const postLogin = <ThrowOnError extends boolean = false>(
  options?: Options<PostLoginData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).post<
    PostLoginResponse,
    PostLoginError,
    ThrowOnError
  >({
    url: "/login",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

export const postLogout = <ThrowOnError extends boolean = false>(
  options?: Options<PostLogoutData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).post<
    PostLogoutResponse,
    unknown,
    ThrowOnError
  >({
    url: "/logout",
    ...options,
  });
};

export const getMe = <ThrowOnError extends boolean = false>(
  options?: Options<GetMeData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    GetMeResponse,
    unknown,
    ThrowOnError
  >({
    url: "/me",
    ...options,
  });
};

export const getChats = <ThrowOnError extends boolean = false>(
  options?: Options<GetChatsData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    GetChatsResponse,
    unknown,
    ThrowOnError
  >({
    url: "/chats",
    ...options,
  });
};

export const postChats = <ThrowOnError extends boolean = false>(
  options?: Options<PostChatsData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).post<
    PostChatsResponse,
    unknown,
    ThrowOnError
  >({
    url: "/chats",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

export const deleteChatsId = <ThrowOnError extends boolean = false>(
  options?: Options<DeleteChatsIdData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).delete<
    unknown,
    unknown,
    ThrowOnError
  >({
    url: `/chats/${options?.path?.id}`,
    ...options,
  });
};

export const getChatsId = <ThrowOnError extends boolean = false>(
  options?: Options<GetChatsIdData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    GetChatsIdResponse,
    unknown,
    ThrowOnError
  >({
    url: `/chats/${options?.path?.id}`,
    ...options,
  });
};

export const patchChatsId = <ThrowOnError extends boolean = false>(
  options?: Options<PatchChatsIdData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).patch<
    PatchChatsIdResponse,
    unknown,
    ThrowOnError
  >({
    url: `/chats/${options?.path?.id}`,
    ...options,
  });
};

export const putChatsId = <ThrowOnError extends boolean = false>(
  options?: Options<PutChatsIdData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).put<
    PutChatsIdResponse,
    unknown,
    ThrowOnError
  >({
    url: `/chats/${options?.path?.id}`,
    ...options,
  });
};

export const getChatsChatIdMessages = <ThrowOnError extends boolean = false>(
  options: Options<GetChatsChatIdMessagesData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetChatsChatIdMessagesResponse,
    unknown,
    ThrowOnError
  >({
    url: `/chats/${options?.path?.chat_id}/messages`,
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

export const postChatsChatIdMessages = <ThrowOnError extends boolean = false>(
  options: Options<PostChatsChatIdMessagesData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    PostChatsChatIdMessagesResponse,
    unknown,
    ThrowOnError
  >({
    url: `/chats/${options?.path?.chat_id}/messages`,
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};
